const typeMaps = {
  python: {
    int: "int",
    long: "int",
    float: "float",
    double: "float",
    bool: "bool",
    string: "str",
    "int[]": "List[int]",
    "string[]": "List[str]",
    "List<int[]>": "List[List[int]]",
    "List<string[]>": "List[List[str]]",
    "List<int>": "List[int]",
    "List<string>": "List[str]",
    "Tree<int>": "TreeNode",
    Tree: "TreeNode",
    Graph: "Dict[int, List[int]]",
  },
  java: {
    int: "int",
    long: "long",
    float: "float",
    double: "double",
    bool: "boolean",
    string: "String",
    "int[]": "int[]",
    "string[]": "String[]",
    "List<int[]>": "List<int[]>",
    "List<string[]>": "List<String[]>",
    "List<int>": "List<Integer>",
    "List<string>": "List<String>",
    "Tree<int>": "TreeNode",
    Tree: "TreeNode",
    Graph: "Map<Integer, List<Integer>>",
  },
  cpp: {
    int: "int",
    long: "long long",
    float: "float",
    double: "double",
    bool: "bool",
    string: "string",
    "int[]": "vector<int>",
    "string[]": "vector<string>",
    "List<int[]>": "vector<vector<int>>",
    "List<string[]>": "vector<vector<string>>",
    "List<int>": "vector<int>",
    "List<string>": "vector<string>",
    "Tree<int>": "TreeNode*",
    Tree: "TreeNode*",
    Graph: "vector<vector<int>>",
  },
  javascript: {
    int: "number",
    long: "number",
    float: "number",
    double: "number",
    bool: "boolean",
    string: "string",
    "int[]": "number[]",
    "string[]": "string[]",
    "List<int[]>": "number[][]",
    "List<string[]>": "string[][]",
    "List<int>": "number[]",
    "List<string>": "string[]",
    "Tree<int>": "TreeNode",
    Tree: "TreeNode",
    Graph: "Record<number, number[]>",
  },
};

function getTypeMapping(language, dslType) {
  const map = typeMaps[language.toLowerCase()];
  return map && map[dslType] ? map[dslType] : dslType;
}

module.exports = { getTypeMapping };
